#include <stdio.h>

#define STRAIGHT_FLUSH 8
#define FOUR_OF_A_KIND 7
#define FULL_HOUSE 6
#define FLUSH 5
#define STRAIGHT 4
#define THREE_OF_A_KIND 3
#define TWO_PAIRS 2
#define ONE_PAIR 1

void read_hand(FILE *file, int *ranks, int *suits)
{
    int i;
    char rank;
    char suit;
    for (i = 0; i < 5; i++) {
        fscanf(file, "%c%c ", &rank, &suit);

        if (rank == 'T')
            ranks[i] = 10;
        else if (rank == 'J')
            ranks[i] = 11;
        else if (rank == 'Q')
            ranks[i] = 12;
        else if (rank == 'K')
            ranks[i] = 13;
        else if (rank == 'A')
            ranks[i] = 14;
        else
            ranks[i] = rank - '0';
        suits[i] = (int)suit;
    }
}

int min2(int a, int b)
{
    if (a < b)
        return a;
    return b;
}

int min5(int a, int b, int c, int d, int e)
{
    return min2(a, min2(b, min2(c, min2(d, e))));
}

int is_flush(int *suits)
{
    return suits[1] == suits[0] && suits[2] == suits[0] && 
           suits[3] == suits[0] && suits[4] == suits[0];
}

int is_straight(int *ranks)
{
    int lowest = min5(ranks[0], ranks[1], ranks[2], ranks[3], ranks[4]);

    int i;
    int target = lowest + 1;
    while (target <= lowest + 4) {
        for (i = 0; i < 5; i++) {
            if (ranks[i] == target)
                break;
        }
        if (i == 5)
            break;
        target++;
    }

    if (target == lowest + 5) {
        return 1;  // found all targets
    } else if (target == lowest + 4 && lowest == 2) {
        // 2-3-4-5 + an ace = flush
        int has_ace = ranks[0] == 14 || ranks[1] == 14 || ranks[2] == 14 ||
                      ranks[3] == 14 || ranks[4] == 14;
        return has_ace;
    }
    return 0;
}

/*
 * Stores the most frequent rank in ranks in the variable pointed to by 
 * *rank_max and its frequency in the variable pointed to by *freq_max. If
 * multiple ranks are found equally frequent, the highest rank is used. The rank
 * whose value equals exclude is not counted.
 */
// TODO: redo?
void most_freq_rank(int *ranks, int exclude, int *rank_max, int *freq_max)
{
    *freq_max = 0;
    *rank_max = 0;

    int i, j;
    int freq;
    int rank;
    for (i = 0; i < 5; i++) {
        freq = 1;
        rank = ranks[i];
        for (j = i + 1; j < 5; j++) {
            if (ranks[j] == rank && ranks[j] != exclude)
                freq++;
        }
        if (freq > *freq_max || (freq == *freq_max && rank > *rank_max)) {
            *freq_max = freq;
            *rank_max = rank;
        }
    }
}

int high_card(int *p1_ranks, int *p2_ranks)
{
    int i;
    int *p1_highest = &p1_ranks[0];
    int *p2_highest = &p2_ranks[0];
    for (i = 1; i < 5; i++) {
        if (p1_ranks[i] > *p1_highest)
            p1_highest = &p1_ranks[i];
        if (p2_ranks[i] > *p2_highest)
            p2_highest = &p2_ranks[i];
    }

    if (*p1_highest > *p2_highest)
        return 1;
    else if (*p2_highest > *p1_highest)
        return 2;

    // Ranks equal. Return the player with the highest remaining card
    *p1_highest = 0;
    *p2_highest = 0;
    return high_card(p1_ranks, p2_ranks);
}

/* 
 * Returns an array of values in descending 
 * importance representing the hand's rank.
 */
int *hand_rank_values(int *ranks, int *suits)
{
    int *values;
    int flush = is_flush(suits);
    int straight = is_straight(ranks);
    if (flush && straight) {
    
    }
}

// TODO: redo
int determine_winner(int *p1_ranks, int *p1_suits, int *p2_ranks, int *p2_suits)
{
    int p1_flush = is_flush(p1_suits);
    int p2_flush = is_flush(p2_suits);

    int p1_straight = is_straight(p1_ranks);
    int p2_straight = is_straight(p2_ranks);

    // Straight flush / royal flush

    int p1_straight_flush = p1_straight && p1_flush;
    int p2_straight_flush = p2_straight && p2_flush;

    if (p1_straight_flush && !p2_straight_flush) {
        return 1;
    } else if (p2_straight_flush && !p1_straight_flush) {
        return 2;
    } else if (p1_straight_flush && p2_straight_flush) {
        return high_card(p1_ranks, p2_ranks);
    }

    // Find rank frequencies
    int p1_most_freq_rank;
    int p1_most_freq_rank_freq;
    int p1_2nd_most_freq_rank;
    int p1_2nd_most_freq_rank_freq;
    most_freq_rank(p1_ranks, 0, &p1_most_freq_rank, &p1_most_freq_rank_freq);
    most_freq_rank(p1_ranks, p1_most_freq_rank, &p1_2nd_most_freq_rank, 
                   &p1_2nd_most_freq_rank_freq);

    int p2_most_freq_rank;
    int p2_most_freq_rank_freq;
    int p2_2nd_most_freq_rank;
    int p2_2nd_most_freq_rank_freq;
    most_freq_rank(p2_ranks, 0, &p2_most_freq_rank, &p2_most_freq_rank_freq);
    most_freq_rank(p2_ranks, p2_most_freq_rank, &p2_2nd_most_freq_rank, 
                   &p2_2nd_most_freq_rank_freq);

    // Four of a kind
    int p1_four_of_a_kind = p1_most_freq_rank_freq == 4;
    int p2_four_of_a_kind = p2_most_freq_rank_freq == 4;

    if (p1_four_of_a_kind && !p2_four_of_a_kind) {
        return 1;
    } else if (p2_four_of_a_kind && !p1_four_of_a_kind) {
        return 2;
    } else if (p1_four_of_a_kind && p2_four_of_a_kind) {
        if (p1_most_freq_rank > p2_most_freq_rank) {
            return 1;
        } else if (p2_most_freq_rank > p1_most_freq_rank) {
            return 2;
        } else {
            return high_card(p1_ranks, p2_ranks);
        }
    }

    // Full house
    int p1_three_of_a_kind = p1_most_freq_rank_freq == 3;
    int p2_three_of_a_kind = p2_most_freq_rank_freq == 3;

    int p1_full_house = p1_three_of_a_kind && p1_2nd_most_freq_rank_freq == 2;
    int p2_full_house = p2_three_of_a_kind && p2_2nd_most_freq_rank_freq == 2;

    if (p1_full_house && !p2_full_house) {
        return 1;
    } else if (p2_full_house && !p1_full_house) {
        return 2;
    } else if (p1_full_house && p2_full_house) {
        if (p1_most_freq_rank > p2_most_freq_rank) {
            return 1;
        } else if (p2_most_freq_rank > p1_most_freq_rank) {
            return 2;
        } else if (p1_2nd_most_freq_rank > p2_2nd_most_freq_rank) {
            return 1;
        } else if (p2_2nd_most_freq_rank > p1_2nd_most_freq_rank) {
            return 2;
        }
    }

    // Flush
    if (p1_flush && !p2_flush) {
        return 1;
    } else if (p2_flush && !p1_flush) {
        return 2;
    } else if (p1_flush && p2_flush) {
        return high_card(p1_ranks, p2_ranks);
    } 

    // Straight
    if (p1_straight && !p2_straight) {
        return 1;
    } else if (p2_straight && !p1_straight) {
        return 2;
    } else if (p1_straight && p2_straight) {
        return high_card(p1_ranks, p2_ranks);
    } 

    // Three of a kind
    if (p1_three_of_a_kind && !p2_three_of_a_kind) {
        return 1;
    } else if (p2_three_of_a_kind && !p1_three_of_a_kind) {
        return 2;
    } else if (p1_three_of_a_kind && p2_three_of_a_kind) {
        if (p1_most_freq_rank > p2_most_freq_rank) {
            return 1;
        } else if (p2_most_freq_rank > p1_most_freq_rank) {
            return 2;
        } else {
            return high_card(p1_ranks, p2_ranks);
        }
        return high_card(p1_ranks, p2_ranks);
    } 

    // Pairs
    int p1_one_pair = p1_most_freq_rank_freq == 2;
    int p2_one_pair = p2_most_freq_rank_freq == 2;

    int p1_two_pairs = p1_one_pair && p1_2nd_most_freq_rank_freq == 2;
    int p2_two_pairs = p2_one_pair && p2_2nd_most_freq_rank_freq == 2;

    // Two pairs
    if (p1_two_pairs && !p2_two_pairs) {
        return 1;
    } else if (p2_two_pairs && !p1_two_pairs) {
        return 2;
    } else if (p1_two_pairs && p2_two_pairs) {
        if (p1_most_freq_rank > p2_most_freq_rank) {
            return 1;
        } else if (p2_most_freq_rank > p1_most_freq_rank) {
            return 2;
        } else if (p1_2nd_most_freq_rank > p2_2nd_most_freq_rank) {
            return 1;
        } else if (p2_2nd_most_freq_rank > p1_2nd_most_freq_rank) {
            return 2;
        }
    }
    if (p1_one_pair && !p2_one_pair) {
        return 1;
    } else if (p2_one_pair && !p1_one_pair) {
        return 2;
    } else if (p1_one_pair && p2_one_pair) {
        if (p1_most_freq_rank > p2_most_freq_rank) {
            return 1;
        } else if (p2_most_freq_rank > p1_most_freq_rank) {
            return 2;
        }
    }

    // High card
    return high_card(p1_ranks, p2_ranks);
}

int main(int argc, char *argv[])
{
    if (argc != 2) {
        puts("specify a poker hand file");
        return 1;
    }

    FILE *file = fopen(argv[1], "r");

    int winner;
    int p1_wins = 0;
    int p1_ranks[5];
    int p1_suits[5];
    int p2_ranks[5];
    int p2_suits[5];

    while (!feof(file)) {
        read_hand(file, p1_ranks, p1_suits);
        read_hand(file, p2_ranks, p2_suits);

        winner = determine_winner(p1_ranks, p1_suits, p2_ranks, p2_suits);
        printf("%d\n", winner);
        if (winner == 1)
            p1_wins++;
    }

    fclose(file);
    printf("player 1 won %d times\n", p1_wins);
    return 0;
}
