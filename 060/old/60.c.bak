#include <stdio.h>
#include <math.h>

int is_prime(int n)
{
    if (n < 2)
        return 0;
    if (n % 2 == 0)
        return n == 2;
    int d;
    int sqrt_n = sqrt(n);
    for (d = 3; d <= sqrt_n; d += 2) {
        if (n % d == 0)
            return 0;
    }
    return 1;
}

int concat(int a, int b)
{
    int div;
    for (div = 10; b / div >= 1; div *= 10);
    return a * div + b;
}

int main()
{
    // TODO: if prime does not fit in any set, create a new set

    //int n_sets = 0;
    //int **sets;

    int n_sets = 3;
    int sets[3][4] = {
        {2, 0, 0, 0},
        {3, 7, 0, 0},
        {5, 0, 0, 0}
    };

    int n = 9;
    int i;
    int j;
    while (1) {
        if (is_prime(n)) {
            printf("prime: %d\n", n);
            for (i = 0; i < n_sets; i++) {
                for (j = 0; j < 4 && sets[i][j] != 0; j++) {
                    printf("concats: %d %d\n", concat(n, sets[i][j]), concat(sets[i][j], n));
                    if (!is_prime(concat(n, sets[i][j]))) {
                        //printf("%d was prime; breaking\n", concat(n, sets[i][j]));
                        break;
                    } if (!is_prime(concat(sets[i][j], n))) {
                        //printf("%d was prime; breaking\n", concat(sets[i][j], n));
                        break;
                    }
                }
                if (sets[i][j] == 0) {
                    sets[i][j] = n;
                    printf("%d fits in set %d\n", n, i);
                    printf("%d %d %d %d\n", sets[i][0], sets[i][1], sets[i][2], sets[i][3]);
                    if (j == 3)
                        return 0;
                }
            }
        }
        n++;
    }
    return 0;
}
